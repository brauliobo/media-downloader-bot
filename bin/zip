#!/usr/bin/env ruby

ENV['PRINT_CMD'] = '1'
ENV['SKIP_META'] = '1'

Dir.chdir File.expand_path "#{File.realpath __dir__}/.." do
  require_relative '../lib/bot'
end

opts  = SymMash.new metadata: {}
lopts = []
while ARGV[-1] and !File.exist?(ARGV[-1]) and ARGV[-1] !~ URI::regexp
  opt = ARGV.pop
  lopts.push opt
  Bot::UrlProcessor.add_opt opts, opt
end

Zipper.size_mb_limit = ENV['SIZE_MB_LIMIT']&.to_i
Subtitler.local = true if ENV['WHISPER_LOCAL']

class Stdout
  include TlBot::Helpers
  mock
end
bot = Stdout.new
st  = Bot::Status.new do |line|
  puts line
end

path = if ARGV.size > 1 then ARGV else ARGV.first.split "\n" end
path.peach do |u|
  klass = if u =~ URI::regexp then Bot::UrlProcessor else Bot::Processor end
  dir   = if u =~ URI::regexp then Dir.pwd else File.dirname u end
  dir   = "#{dir}/converted"
  Dir.mkdir dir rescue nil

  if klass == Bot::UrlProcessor
    line = "#{u} #{lopts.join ' '}"
    prc  = klass.new(dir:, line:, bot:, st:)
    prc.download.peach do |i|
      prc.download_one i
      prc.handle_input i
      prc.cleanup
    end
  else
    prc = klass.new(dir:, bot:, st:)
    i   = prc.input_from_file u, opts
    prc.handle_input i

    Tagger.copy u, i.fn_out
    prc.cleanup
  end
end

